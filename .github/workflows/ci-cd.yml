name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PHP_VERSION: '8.3'
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  tests:
    name: PHP Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: pgsql, pdo_pgsql, mbstring, intl, gd, zip, bcmath, pcntl
          coverage: none

      - name: Cache Composer deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache/files
            vendor
          key: composer-${{ runner.os }}-${{ env.PHP_VERSION }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-${{ runner.os }}-${{ env.PHP_VERSION }}-

      - name: Install Composer deps
        run: |
          composer install --no-interaction --prefer-dist

      - name: Prepare .env
        run: |
          cp .env.example .env
          php artisan key:generate
          {
            echo 'APP_ENV=testing';
            echo 'APP_DEBUG=true';
            echo 'DB_CONNECTION=pgsql';
            echo 'DB_HOST=127.0.0.1';
            echo 'DB_PORT=5432';
            echo 'DB_DATABASE=testing';
            echo 'DB_USERNAME=postgres';
            echo 'DB_PASSWORD=postgres';
          } >> .env

      - name: Create test database
        env:
          PGPASSWORD: postgres
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          psql -h 127.0.0.1 -U postgres -c 'CREATE DATABASE testing;'

      - name: Migrate
        run: php artisan migrate --force

  docker:
    name: Build and Push Images
    needs: tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare tags
        id: meta
        run: |
          IMAGE_BASE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          echo "app_latest=${IMAGE_BASE}:app-fpm-latest" >> $GITHUB_OUTPUT
          echo "app_sha=${IMAGE_BASE}:app-fpm-${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "reverb_latest=${IMAGE_BASE}:reverb-latest" >> $GITHUB_OUTPUT
          echo "reverb_sha=${IMAGE_BASE}:reverb-${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Build+Push app-fpm
        uses: docker/build-push-action@v5
        with:
          context: .
          target: app-fpm
          push: true
          tags: |
            ${{ steps.meta.outputs.app_latest }}
            ${{ steps.meta.outputs.app_sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build+Push reverb
        uses: docker/build-push-action@v5
        with:
          context: .
          target: app-reverb
          push: true
          tags: |
            ${{ steps.meta.outputs.reverb_latest }}
            ${{ steps.meta.outputs.reverb_sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

