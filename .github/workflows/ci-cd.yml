name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy:
        description: "Run Ansible deploy"
        required: false
        default: "true"
        type: choice
        options: ["true", "false"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PHP_VERSION: '8.3'
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  tests:
    name: PHP Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: pgsql, pdo_pgsql, mbstring, intl, gd, zip, bcmath, pcntl
          coverage: none

      - name: Cache Composer deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache/files
            vendor
          key: composer-${{ runner.os }}-${{ env.PHP_VERSION }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-${{ runner.os }}-${{ env.PHP_VERSION }}-

      - name: Install Composer deps
        run: |
          composer install --no-interaction --prefer-dist

      - name: Prepare .env
        run: |
          cp .env.example .env
          php artisan key:generate
          {
            echo 'APP_ENV=testing';
            echo 'APP_DEBUG=true';
            echo 'DB_CONNECTION=pgsql';
            echo 'DB_HOST=127.0.0.1';
            echo 'DB_PORT=5432';
            echo 'DB_DATABASE=testing';
            echo 'DB_USERNAME=postgres';
            echo 'DB_PASSWORD=postgres';
          } >> .env

      - name: Create test database
        env:
          PGPASSWORD: postgres
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          psql -h 127.0.0.1 -U postgres -c 'CREATE DATABASE testing;'

      - name: Migrate
        run: php artisan migrate --force

  docker:
    name: Build and Push Image
    needs: tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare tags
        id: meta
        run: |
          IMAGE_BASE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          echo "image_latest=${IMAGE_BASE}:latest" >> $GITHUB_OUTPUT
          echo "image_sha=${IMAGE_BASE}:${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Build+Push App Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ steps.meta.outputs.image_latest }}
            ${{ steps.meta.outputs.image_sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy via Ansible
    needs: tests
    # Auto-deploy on push to main, or manual run when dispatch says true
    if: >-
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && inputs.deploy == 'true')
    runs-on: ubuntu-latest
    env:
      ANSIBLE_HOST_KEY_CHECKING: "false"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Install Ansible collections
        run: ansible-galaxy collection install -r infra/ansible/requirements.yml

      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add host to known_hosts
        if: secrets.SSH_HOST != ''
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "${{ secrets.SSH_PORT || 22 }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Prepare inventory (CI)
        run: |
          : "Create ephemeral inventory using secrets"
          cat > infra/ansible/inventory.ci.ini << 'EOF'
          [web]
          ${{ secrets.SSH_HOST }} ansible_port=${{ secrets.SSH_PORT || 22 }} ansible_user=${{ secrets.SSH_USER || 'deploy' }}
          EOF

      - name: Prepare extra vars (optional)
        run: |
          : "Write only the vars you want to override"
          cat > infra/ansible/extra_vars.yml << 'EOF'
          server_name: "${{ secrets.SERVER_NAME }}"
          branch: "main"
          db_name: "${{ secrets.DB_NAME }}"
          db_user: "${{ secrets.DB_USER }}"
          db_password: "${{ secrets.DB_PASSWORD }}"
          reverb_host: "${{ secrets.REVERB_HOST || '127.0.0.1' }}"
          reverb_port: ${{ secrets.REVERB_PORT || 8080 }}
          queue_conn: "${{ secrets.QUEUE_CONN || 'redis' }}"
          EOF

      - name: Run Ansible playbook
        run: |
          set -euo pipefail
          # Show Ansible version for debugging
          ansible --version
          # Run deploy
          ansible-playbook -i infra/ansible/inventory.ci.ini infra/ansible/site.yml \
            -e @infra/ansible/extra_vars.yml
